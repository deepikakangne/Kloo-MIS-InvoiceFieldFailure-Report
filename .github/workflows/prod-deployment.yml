name: CI/CD for Kloo-Mis
on:
  push:
    branches:
      - main
      - develop
      - master

jobs:
  prod-job:
    if: github.ref == 'refs/heads/main'
    runs-on: self-hosted
    steps:
    - name: Code Checkout
      uses: actions/checkout@v3

    - name: Set up Python 3.9
      uses: actions/setup-python@v3
      with:
        python-version: "3.9"
    
    - name: Set up AWS Cli
      run: |
        aws configure set region eu-west-2
        AWS_ACCESS_KEYID=$(aws secretsmanager get-secret-value --secret-id kloo_environment_variable_prod | jq --raw-output '.SecretString' | jq -r .\"KLOO_PROD_AWS_ACCESS_KEYID\")
        echo "AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEYID" >> .env
        AWS_SECRET_ACCESSKEY=$(aws secretsmanager get-secret-value --secret-id kloo_environment_variable_prod | jq --raw-output '.SecretString' | jq -r .\"KLOO_PROD_AWS_SECRET_ACCESSKEY\")
        echo "AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESSKEY" >> .env
        echo "AWS_DEFAULT_REGION=eu-west-2" >> .env 

    - name: DB Configure
      run: |
        echo "DB_CONNECTION=mysql" >> .env
        echo "DB_HOST=mysql-kloo-prod.internal-service-kloo.com" >> .env
        echo "DB_PORT=3306" >> .env
        echo "DB_DATABASE=myrdssql01" >> .env
        DB_USERNAME=`aws secretsmanager get-secret-value --secret-id kloo_environment_variable_prod | jq --raw-output '.SecretString' | jq -r ."Prodution_DB_Username"`
        echo "DB_USERNAME=$DB_USERNAME" >> .env
        DB_PASSWORD=`aws secretsmanager get-secret-value --secret-id kloo_environment_variable_prod | jq --raw-output '.SecretString' | jq -r ."Production_DB_Password"`
        echo "DB_PASSWORD=$DB_PASSWORD" >> .env

    - name: Push and deploy
      run: |
        aws ecr get-login-password --region eu-west-2  | docker login --username AWS --password-stdin ${{ vars.DOCKER_REGISTRY }}
        docker build -t ${{ vars.DOCKER_REGISTRY}}/${{ vars.APP_NAME }}:latest .
        echo ${{ vars.DOCKER_REGISTRY}}/${{ vars.APP_NAME }}
        docker push ${{ vars.DOCKER_REGISTRY}}/${{ vars.APP_NAME }}:latest
        # echo "Uploading the docker image to Lambda function $FUNC_NAME"
        # aws lambda update-function-code --region eu-west-2 --function-name ${{ vars.PROD_FUNC_NAME }} --image-uri ${{ vars.DOCKER_REGISTRY}}/prod/${{ vars.APP_NAME }}:latest
